/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package co.edu.intecap.clinicaveterinaria.vista.paneles;

import co.edu.intecap.clinicaveterinaria.control.TipoMascotaDelegado;
import co.edu.intecap.clinicaveterinaria.modelo.vo.TipoMascotaVo;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author capacacitaciones
 */
public class TipoMascotaPanel extends javax.swing.JPanel {

    
    private  DefaultTableModel modelo;
    private final TipoMascotaVo tipoMascotaVo;
    /**
     * Creates new form TipoMascotaPanel
     */
    public TipoMascotaPanel() {
        initComponents();
        configurarTabla();
        llenarTabla(new TipoMascotaDelegado(this).consultarTipoMascotas(),modelo);
        this.tipoMascotaVo = new TipoMascotaVo();
    }

    
    /**
     * *registro -> TipoMascotaVo(registrar, actualizar -> id
     * 
     * Table-> listener -> ActionPerformed -> button
     *        value chnged
     *        mousevend
     *                      click
     *                      Dclick
     *                      sclick
     * 
     * 
     * */     
    //metodo para obtener valores del GUI y resgistrar un nuevo tipo de mascota
    private void registrarTipoMascota(){
        //asignar nombre del tipo de mascota
        tipoMascotaVo.setNombre(txtNombre.getText());
        tipoMascotaVo.setEstado(cbxEstado.isSelected());
        
        //validar si el id de la constante es mayo a cero 
        if (tipoMascotaVo.getIdTipoMascota() < 1) {
            //se crea un nuevo registro de tipo mascota
        new TipoMascotaDelegado(this).insertarTipoMascota(tipoMascotaVo);    
            
            
        } else {
            new TipoMascotaDelegado(this).editarTipoMascota(tipoMascotaVo);
            
        }   
        
        //mensaje de confirmacion de registro
        JOptionPane.showMessageDialog(this, "Tipo de mascota registrado", "registro de datos", JOptionPane.INFORMATION_MESSAGE);
        refrescarTabla();
        
        limpiarCampos();
        limpiarConstante();
        
    }
    //permite establecer los parametros iniciales de una tabla
    
    private void configurarTabla(){
        
        modelo = new DefaultTableModel();
        modelo.addColumn("Id Mascota");
        modelo.addColumn("nombre");
        modelo.addColumn("estado");
        tblTipoMascota.setModel(modelo);
        //busca la llave primaria de lo q se selecciono
        tblTipoMascota.getSelectionModel().addListSelectionListener(tableListener);
    }
    
    /**
     * documentar los metodos
     * Carga una lista de tipos de mascota desde la base de datos a la tabla de la interfaz grafica de usuario
     * @param listaTipoMascota lista de tipos de mascota de la base de datos 
     * @param modelo modelo de tabla con la estructura de los datos a cargar 
     */
    
    private void llenarTabla(List<TipoMascotaVo> listaTipoMascota,DefaultTableModel modelo ){
        
        for (TipoMascotaVo tipoMascotaVo : listaTipoMascota) {
            Object [] fila = new Object[3];
            fila[0]= tipoMascotaVo.getIdTipoMascota();
            fila[1]= tipoMascotaVo.getNombre();
            fila[2]=tipoMascotaVo.isEstado();
            modelo.addRow(fila);
        }
        tblTipoMascota.updateUI();
    }
    
    /**
     * actualiza la informacion de la tabla con cada vez que se realiza 
     * un registro
     */
    private void  refrescarTabla(){
        
        modelo.setRowCount(0);
        List<TipoMascotaVo> listaMascotas = new TipoMascotaDelegado(this).consultarTipoMascotas();
        llenarTabla(listaMascotas,modelo);
        
        
    }
    
    private void limpiarCampos(){
        
        txtNombre.setText("");
        cbxEstado.setSelected(false);
        
    }
    
    
    /**
     * reinicia los valores de la constante que se usa para 
     * insertar o actualizar un registro de la tabla tipo_mascota
     * 
     */
    private void limpiarConstante(){
        
        //limpiar el id del tipo de la mascota
        tipoMascotaVo.setIdTipoMascota(0);
        //limpiar el nombre de la mascota
        tipoMascotaVo.setNombre("");
        //limpiar el estado del tipo mascota
        tipoMascotaVo.setEstado(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        cbxEstado = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTipoMascota = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();

        jLabel1.setText("Nombre:");

        jLabel2.setText("Estado:");

        cbxEstado.setText("Activo");

        tblTipoMascota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblTipoMascota);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombre)
                            .addComponent(cbxEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardar)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbxEstado)
                        .addComponent(btnGuardar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
/**
 * 
 * @param evt 
 */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        this.registrarTipoMascota();
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * Escuchador de eventos para la seleccion  de las filas en una tabla
     * permite obtener el id de un registro de la tabla con datos de la base
     * de datos, con el fin de realizar el trabajo de edicion de un registro 
     * para ello  se usa un objeto que represente un registro  de la tabla de la base de datos (vo)
     * para luego enviar dichos datos como parte de los parametros de la actualizacion
     */
    
    ListSelectionListener tableListener = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            //validar si se ha seleccionado una fila de la tabla
            
              //el row sirve para seleccionar cuando le de clic 
            if (tblTipoMascota.getSelectedRow() > - 1) {
                // se obtiene el id de la fila selecionada en la tabla 
                // int id -> variable que guarda el id tipo mascota de la fila selecionar 
                // (int)  -> casteo del objeto que se obtiene al seleccionar  una filade la tabla 
                // de la interfaz grafica de usuario " se castea a un dato de tipo int" 
                //tblTipoMascota.getvalueAr -> metodo que permite obtener el dato de una celda de la tabla segun los parametros
                //( filam,columna) este metodo retorna un objeto de la clase object 
                // tblTipoMascota.getselectedRow() -> metodo que retorna el numero de la fila sobre la cual se ha realizado 
                // un seleccion con el mouse 
                // 0 -> ese cero representa el indice de la columna seleccionada , siempre es cero pq toma como referencia 
                // la primera columna de la tabla.
                int id= (int)tblTipoMascota.getValueAt(tblTipoMascota.getSelectedRow(), 0);
                // consultar en la base de datos por ese id seleccionado y guardar el resultado de la consulta
                // en un nuevo object de TipoMascotaVo
                TipoMascotaVo tMvo = new TipoMascotaDelegado(TipoMascotaPanel.this).consultarTipoMascota(id);
                //asignar los valores abtenidos de la consulta a la constante
                tipoMascotaVo.setIdTipoMascota(tMvo.getIdTipoMascota());
                tipoMascotaVo.setNombre(tMvo.getNombre());
                tipoMascotaVo.setEstado(tMvo.isEstado());
              // llenar campos del formulario
                
                
                llenarCampos();
            }     
          /**
           * cuando se crea objetos de una interfaz de despliegan los corchetes
           * y como sigue siendo un objeto ay q finalizarlo con punto y com(;)
           */
        }
    };
    
    private void llenarCampos(){
        
        txtNombre.setText(tipoMascotaVo.getNombre());
        cbxEstado.setSelected(tipoMascotaVo.isEstado());
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox cbxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblTipoMascota;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

   
}
